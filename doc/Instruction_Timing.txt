6510 Instruction Timing (excerpt modified from http://nesdev.com/6502_cpu.txt)

  The NMOS 6500 series processors always perform at least two reads
for each instruction. In addition to the operation code (opcode), they
fetch the next byte. This is quite efficient, as most instructions are
two or three bytes long.

  The processors also use a sort of pipelining. If an instruction does
not store data in memory on its last cycle, the processor can fetch
the opcode of the next instruction while executing the last cycle. For
instance, the instruction EOR #$FF truly takes three cycles. On the
first cycle, the opcode $49 will be fetched. During the second cycle
the processor decodes the opcode and fetches the parameter #$FF. On
the third cycle, the processor will perform the operation and store
the result to accumulator, but simultaneously it fetches the opcode
for the next instruction. This is why the instruction effectively
takes only two cycles.

  The following tables show what happens on the bus while executing
different kinds of instructions.

  Interrupts

     NMI and IRQ both take 7 cycles. Their timing diagram is much like
     BRK's (see below). IRQ will be executed only when the I flag is
     clear. IRQ and BRK both set the I flag, whereas the NMI does not
     affect its state.

     The processor will usually wait for the current instruction to
     complete before executing the interrupt sequence. To process the
     interrupt before the next instruction, the interrupt must occur
     before the last cycle of the current instruction.

     There is one exception to this rule: the BRK instruction. If a
     hardware interrupt (NMI or IRQ) occurs before the fourth (flags
     saving) cycle of BRK, the BRK instruction will be skipped, and
     the processor will jump to the hardware interrupt vector. This
     sequence will always take 7 cycles.

     You do not completely lose the BRK interrupt, the B flag will be
     set in the pushed status register if a BRK instruction gets
     interrupted. When BRK and IRQ occur at the same time, this does
     not cause any problems, as your program will consider it as a
     BRK, and the IRQ would occur again after the processor returned
     from your BRK routine, unless you cleared the interrupt source in
     your BRK handler. But the simultaneous occurrence of NMI and BRK
     is far more fatal. If you do not check the B flag in the NMI
     routine and subtract two from the return address when needed, the
     BRK instruction will be skipped.

     If the NMI and IRQ interrupts overlap each other (one interrupt
     occurs before fetching the interrupt vector for the other
     interrupt), the processor will most probably jump to the NMI
     vector in every case, and then jump to the IRQ vector after
     processing the first instruction of the NMI handler. This has not
     been measured yet, but the IRQ is very similar to BRK, and many
     sources state that the NMI has higher priority than IRQ. However,
     it might be that the processor takes the interrupt that comes
     later, i.e. you could lose an NMI interrupt if an IRQ occurred in
     four cycles after it.

     After finishing the interrupt sequence, the processor will start
     to execute the first instruction of the interrupt routine. This
     proves that the processor uses a sort of pipelining: it finishes
     the current instruction (or interrupt sequence) while reading the
     opcode of the next instruction.

     RESET does not push program counter on stack, and it lasts
     probably 6 cycles after deactivating the signal. Like NMI, RESET
     preserves all registers except PC.

  Instructions accessing the stack

     BRK

        #  address R/W description
       --- ------- --- -----------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR = M[PC], PC=PC+1
        2    PC     R  read next instruction byte (and throw it away),
                       increment PC
                        IR = M[PC]  PC+=1                               (BRK_IMP_1)
        3  $0100,S  W  push PCH on stack (with B flag set), decrement S
                        M[S] = PCH, S-=1                                (BRK_IMP_2)
        4  $0100,S  W  push PCL on stack, decrement S
                        M[S] = PCL, S-=1                                (BRK_IMP_3)
        5  $0100,S  W  push P on stack, decrement S
                        M[S] = P, S-=1                                  (BRK_IMP_4)
        6   $FFFE   R  fetch PCL
                        PCL=M[$FFFE]                                    (BRK_IMP_5)
        7   $FFFF   R  fetch PCH
                        PCH=M[$FFFF]                                    (BRK_IMP)

     RTI

        #  address R/W description
       --- ------- --- -----------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR = M[PC], PC+=1
        2    PC     R  read next instruction byte (and throw it away)
                        IR = M[PC]                                      (IMPLIED_ACCUMULATOR)
        3  $0100,S  R  increment S 
                        S+=1                                            (RTI_IMP_1)
        4  $0100,S  R  pull P from stack, increment S
                        P=M[S], S+=1                                    (RTI_IMP_2)
        5  $0100,S  R  pull PCL from stack, increment S
                        PCL=M[S], S+=1                                  (RTI_IMP_3)
        6  $0100,S  R  pull PCH from stack
                        PCH=M[S]                                        (RTI_IMP)

     RTS

        #  address R/W description
       --- ------- --- -----------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  read next instruction byte (and throw it away)
                        IR=M[PC]                                        (IMPLIED_ACCUMULATOR)
        3  $0100,S  R  increment S
                        S+=1                                            (RTS_IMP_1)
        4  $0100,S  R  pull PCL from stack, increment S
                        PCL=M[S], S+=1                                  (RTS_IMP_2)
        5  $0100,S  R  pull PCH from stack
                        PCH=M[S], S+=1                                  (RTS_IMP_3)
        6    PC     R  increment PC
                        PC+=1                                           (RTS_IMP)

     PHA, PHP

        #  address R/W description
       --- ------- --- -----------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  read next instruction byte (and throw it away)
                        IR=M[PC]                                        (IMPLIED_ACCUMULATOR)
        3  $0100,S  W  push register on stack, decrement S
                        M[S|$0100]=A/P, S-=1                            (depends)

     PLA, PLP

        #  address R/W description
       --- ------- --- -----------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  read next instruction byte (and throw it away)
                        IR=M[PC]                                        (IMPLIED_ACCUMULATOR)
        3  $0100,S  R  increment S
                        S+=1                                            (depends_1)
        4  $0100,S  R  pull register from stack
                        A/P = M[S]                                      (depends)

     JSR

        #  address R/W description
       --- ------- --- -------------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  fetch low address byte, increment PC
                        DL=M[PC], PC+=1                                 (JSR_ABS_1)
        3  $0100,S  R  internal operation (predecrement S?)
                        S-=1?                                           (JSR_ABS_2)
        4  $0100,S  W  push PCH on stack, decrement S
                        M[S]=PCH, S-=1                                  (JSR_ABS_3)
        5  $0100,S  W  push PCL on stack, decrement S
                        M[S]=PCL, S-=1                                  (JSR_ABS_4)
        6    PC     R  copy low address byte to PCL, fetch high address
                       byte to PCH
                        PCL=DL, PCH=M[PC]                               (JSR_ABS)

  Accumulator or implied addressing

        #  address R/W description
       --- ------- --- -----------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  read next instruction byte (and throw it away)
                        Use M[PC]       (IMPLIED_ACCUMULATOR) (depends?)

  Immediate addressing

        #  address R/W description
       --- ------- --- ------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  fetch value, increment PC
                        DL=M[PC], PC+=1   (IMMEDIATE)

  Absolute addressing

     JMP

        #  address R/W description
       --- ------- --- -------------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  fetch low address byte, increment PC
                        DL=M[PC], PC+=1     (JMP_ABS_1)
        3    PC     R  copy low address byte to PCL, fetch high address
                       byte to PCH
                        PCL=DL, PCH=M[PC]   (JMP_ABS)

     Read instructions (LDA, LDX, LDY, EOR, AND, ORA, ADC, SBC, CMP, BIT,
                        LAX, NOP)

        #  address R/W description
       --- ------- --- ------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  fetch low byte of address, increment PC
                        DL=M[PC], PC+=1     (ABSOLUTE_1)
        3    PC     R  fetch high byte of address, increment PC
                        DH=M[PC], PC+=1     (ABSOLUTE_2)
        4  address  R  read from effective address
                        A=M[D]              (depends)

     Read-Modify-Write instructions (ASL, LSR, ROL, ROR, INC, DEC,
                                     SLO, SRE, RLA, RRA, ISB, DCP)

        #  address R/W description
       --- ------- --- ------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  fetch low byte of address, increment PC
                        DL=M[PC], PC+=1
        3    PC     R  fetch high byte of address, increment PC
                        DH=M[PC], PC+=1
        4  address  R  read from effective address
                        TL=M[D]
        5  address  W  write the value back to effective address,
                       and do the operation on it
                        TL=ALU.op(TL)
        6  address  W  write the new value to effective address
                        M[D]=TL

     Write instructions (STA, STX, STY, SAX)

        #  address R/W description
       --- ------- --- ------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  fetch low byte of address, increment PC
                        DL=M[PC], PC+=1
        3    PC     R  fetch high byte of address, increment PC
                        DH=M[PC], PC+=1
        4  address  W  write register to effective address
                        M[D]=A/X/Y/(A&X)

  Zero page addressing - Note, implementation consolidates a lot of this with absolute states above.

     Read instructions (LDA, LDX, LDY, EOR, AND, ORA, ADC, SBC, CMP, BIT,
                        LAX, NOP)

        #  address R/W description
       --- ------- --- ------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  fetch address, increment PC
                        D=00,M[PC], PC+=1   (ZEROPAGE)
        3  address  R  read from effective address
                        A/X/Y=M[D]             (depends)

     Read-Modify-Write instructions (ASL, LSR, ROL, ROR, INC, DEC,
                                     SLO, SRE, RLA, RRA, ISB, DCP)

        #  address R/W description
       --- ------- --- ------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  fetch address, increment PC
                        D=00,M[PC], PC+=1   (ZEROPAGE)
        3  address  R  read from effective address
                        TL=M[D]             (ZEROPAGE_R)
        4  address  W  write the value back to effective address,
                       and do the operation on it
                        TL=op(TL)           (depends)
        5  address  W  write the new value to effective address
                        M[D]=TL             (ZEROPAGE_W)


     Write instructions (STA, STX, STY, SAX)

        #  address R/W description
       --- ------- --- ------------------------------------------
        1    PC     R  fetch opcode, increment PC
                        IR=M[PC], PC+=1
        2    PC     R  fetch address, increment PC
                        D=00,M[PC], PC+=1   (ZEROPAGE)
        3  address  W  write register to effective address
                        M[D]=A/X/Y/AX       (depends)

  Zero page indexed addressing

     Read instructions (LDA, LDX, LDY, EOR, AND, ORA, ADC, SBC, CMP, BIT,
                        CPX, CPY,
                        LAX, NOP)

        #   address  R/W description
       --- --------- --- ------------------------------------------
        1     PC      R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2     PC      R  fetch address, increment PC        (ZEROPAGE)
                            D=00,M[PC], PC+=1
        3   address   R  read from address, add index register to it    (ZEROPAGE_XY)
                            D+=X/Y (Note that this will wrap on 8-bit)
        4  address+I* R  read from effective address            (depends)
                            A/X/Y=op(M[D])

       Notes: I denotes either index register (X or Y).

              * The high byte of the effective address is always zero,
                i.e. page boundary crossings are not handled.

     Read-Modify-Write instructions (ASL, LSR, ROL, ROR, INC, DEC,
                                     SLO, SRE, RLA, RRA, ISB, DCP)

        #   address  R/W description
       --- --------- --- ---------------------------------------------
        1     PC      R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2     PC      R  fetch address, increment PC        (ZEROPAGE)
                            D=00,M[PC], PC+=1
        3   address   R  read from address, add index register X to it  (ZEROPAGE_XY)
                            D+=X
        4  address+X* R  read from effective address        (ZEROPAGE_R)
                            TL=M[D]
        5  address+X* W  write the value back to effective address,  (depends)
                         and do the operation on it
                            TL=op(TL)
        6  address+X* W  write the new value to effective address   (ZEROPAGE_W)
                            M[D]=TL

       Note: * The high byte of the effective address is always zero,
               i.e. page boundary crossings are not handled.

     Write instructions (STA, STX, STY, SAX)

        #   address  R/W description
       --- --------- --- -------------------------------------------
        1     PC      R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2     PC      R  fetch address, increment PC        (ZEROPAGE)
                            D=00,M[PC], PC+=1
        3   address   R  read from address, add index register to it (ZEROPAGE_XY)
                            D+=X/Y
        4  address+I* W  write to effective address         (depends)
                            M[D]=A/X/Y/AX

       Notes: I denotes either index register (X or Y).

              * The high byte of the effective address is always zero,
                i.e. page boundary crossings are not handled.

  Absolute indexed addressing

     Read instructions (LDA, LDX, LDY, EOR, AND, ORA, ADC, SBC, CMP,
                        BIT,
                        LAX, LAE, SHS, NOP)
        #   address  R/W description
       --- --------- --- ------------------------------------------
        1     PC      R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2     PC      R  fetch low byte of address, increment PC    (ABSOLUTE_1)
                            DL=M[PC], PC+=1
        3     PC      R  fetch high byte of address,                (ABSOLUTE_X/Y)
                         add index register to low address byte,
                         increment PC
                            DH=M[PC] DL+=X/Y PC+=1
        4  address+I* R  read from effective address,               (depends)
                         fix the high byte of effective address
                            if DH is invalid, DH.fix, else A/X/Y=M[D] and done.
        5+ address+I  R  re-read from effective address             (depends_PAGE)
                            A/X/Y = M[D]

       Notes: I denotes either index register (X or Y).

              * The high byte of the effective address may be invalid
                at this time, i.e. it may be smaller by $100.

              + This cycle will be executed only if the effective address
                was invalid during cycle #4, i.e. page boundary was crossed.

     Read-Modify-Write instructions (ASL, LSR, ROL, ROR, INC, DEC,
                                     SLO, SRE, RLA, RRA, ISB, DCP)
                                     
        #   address  R/W description
       --- --------- --- ------------------------------------------
        1    PC       R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2    PC       R  fetch low byte of address, increment PC            (ABSOLUTE_1)
                            DL=M[PC], PC+=1
        3    PC       R  fetch high byte of address,                        (ABSOLUTE_X/Y)
                         add index register X to low address byte,
                         increment PC
                            DH=M[PC], DL+=X PC+=1
        4  address+X* R  read from effective address,                       (ABSOLUTE_XYR)
                         fix the high byte of effective address
                            if DH invalid, DH.fix. TL=M[D]
        5  address+X  R  re-read from effective address                     (ABSOLUTE_XYR_PAGE)
                            TL=M[D]
        6  address+X  W  write the value back to effective address,         (depends)
                         and do the operation on it
                            TL=op(TL)
        7  address+X  W  write the new value to effective address           (ABSOLUTE_W)
                            M[D]=TL

       Notes: * The high byte of the effective address may be invalid
                at this time, i.e. it may be smaller by $100.

     Write instructions (STA,
            STX, STY, SHA, SHX, SHY)

        #   address  R/W description
       --- --------- --- ------------------------------------------
        1     PC      R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2     PC      R  fetch low byte of address, increment PC            (ABSOLUTE_1)
                            DL=M[PC], PC+=1
        3     PC      R  fetch high byte of address,                        (ABSOLUTE_X/Y)
                         add index register to low address byte,
                         increment PC
                            DH=M[PC], DL+=X/Y, PC+=1
        4  address+I* R  read from effective address,                       (ABSOLUTE_XYR)
                         fix the high byte of effective address
                            if DH invalid, DH+=1, else wait
        5  address+I  W  write to effective address                         (depends)
                            M[D]=X/Y/A

       Notes: I denotes either index register (X or Y).

              * The high byte of the effective address may be invalid
                at this time, i.e. it may be smaller by $100. Because
                the processor cannot undo a write to an invalid
                address, it always reads from the address first.

  Relative addressing (BCC, BCS, BNE, BEQ, BPL, BMI, BVC, BVS)

        #   address  R/W description
       --- --------- --- ---------------------------------------------
        1     PC      R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2     PC      R  fetch operand, increment PC
                            DL=M[PC], PC+=1                         (BRANCH)
        3     PC      R  Fetch opcode of next instruction,          (BRANCH_CHECK)
                         If branch is taken, add operand to PCL.
                         Otherwise increment PC.
                            IR=M[PC], if taken, PCL+=DL, else PC+=1
        4+    PC*     R  Fetch opcode of next instruction.          (BRANCH_TAKEN)
                         Fix PCH. If it did not change, increment PC.
                            IR=M[PC], If PCH invalid, PCH+=1, else PC+=1 and done
        5!    PC      R  Fetch opcode of next instruction,          (BRANCH_PAGE)
                         increment PC.
                            IR=M[PC], PC+=1
                            
        == Fix condition examples:
        - PCL   REL:
        - $ff + $01 = yes -> Carry on addition of positive #.
        - $fe + $01 = no  -> No carry on addition of positive #.
        - $01 + $ff = no  -> Carry on addition of negative #.
        - $01 + $fe = yes -> No carry on addition of negative #.
        

       Notes: The opcode fetch of the next instruction is included to
              this diagram for illustration purposes. When determining
              real execution times, remember to subtract the last
              cycle.

              * The high byte of Program Counter (PCH) may be invalid
                at this time, i.e. it may be smaller or bigger by $100.

              + If branch is taken, this cycle will be executed.

              ! If branch occurs to different page, this cycle will be
                executed.

  Indexed indirect addressing (X)

     Read instructions (LDA, ORA, EOR, AND, ADC, CMP, SBC,
                        LAX)

        #    address   R/W description
       --- ----------- --- ------------------------------------------
        1      PC       R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2      PC       R  fetch pointer address, increment PC
                            D=00,M[PC], PC+=1                       (XID_1)
        3    pointer    R  read from the address, add X to it
                            DL+=X                                   (XID_2)
        4   pointer+X   R  fetch effective address low
                            TL=M[D]  D+=1                           (XID_3)
        5  pointer+X+1  R  fetch effective address high
                            TH=M[D]                                 (XID_4)
        6    address    R  read from effective address
                            A=M[T]                                  (depends)

       Note: The effective address is always fetched from zero page,
             i.e. the zero page boundary crossing is not handled.

     Read-Modify-Write instructions (SLO, SRE, RLA, RRA, ISB, DCP)
        @@ These are all unofficial opcodes.

        #    address   R/W description
       --- ----------- --- ------------------------------------------
        1      PC       R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2      PC       R  fetch pointer address, increment PC
                            DL=M[PC], PC+=1                         (XID_1)
        3    pointer    R  read from the address, add X to it
                            DL+=X                                   (XID_2)
        4   pointer+X   R  fetch effective address low
                            TL=M[D] D+=1                            (XID_3)
        5  pointer+X+1  R  fetch effective address high
                            TH=M[D]                                 (XID_4)
        6    address    R  read from effective address
                            A=M[T]                                  (XID_R)
        7    address    W  write the value back to effective address,
                           and do the operation on it
                            A=op(A)                                 (depends)
        8    address    W  write the new value to effective address
                            M[T]=A                                  (XID_W)

       Note: The effective address is always fetched from zero page,
             i.e. the zero page boundary crossing is not handled.

     Write instructions (STA,
                        SAX)

        #    address   R/W description
       --- ----------- --- ------------------------------------------
        1      PC       R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2      PC       R  fetch pointer address, increment PC
                            D=00,M[PC], PC+=1                       (XID_1)
        3    pointer    R  read from the address, add X to it
                            DL+=X                                   (XID_2)
        4   pointer+X   R  fetch effective address low
                            TL=M[D]  D+=1                           (XID_3)
        5  pointer+X+1  R  fetch effective address high
                            TH=M[D]                                 (XID_4)
        6    address    W  write to effective address
                            M[T]=A/AX                               (depends)

       Note: The effective address is always fetched from zero page,
             i.e. the zero page boundary crossing is not handled.

  Indirect indexed addressing

     Read instructions (LDA, EOR, AND, ORA, ADC, SBC, CMP)

        #    address   R/W description
       --- ----------- --- ------------------------------------------
        1      PC       R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2      PC       R  fetch pointer address, increment PC
                            D=00,M[PC], PC+=1                       (IDY_1)
        3    pointer    R  fetch effective address low
                            TL=M[D]  D+=1                           (IDY_2)
        4   pointer+1   R  fetch effective address high,
                           add Y to low byte of effective address
                            TH=M[D], TL+=Y                          (IDY_3)
        5   address+Y*  R  read from effective address,
                           fix high byte of effective address
                            if TH invalid, TH+=1, else A=op?(M[T])  (depends) (Careful! It's unsigned.)
        6+  address+Y   R  read from effective address
                            A=op?(M[T])                             (depends_PG = analogous xid)

       Notes: The effective address is always fetched from zero page,
              i.e. the zero page boundary crossing is not handled.

              * The high byte of the effective address may be invalid
                at this time, i.e. it may be smaller by $100.

              + This cycle will be executed only if the effective address
                was invalid during cycle #5, i.e. page boundary was crossed.

     Read-Modify-Write instructions (SLO, SRE, RLA, RRA, ISB, DCP)
        @@ all onofficial instructions:
        
        #    address   R/W description
       --- ----------- --- ------------------------------------------
        1      PC       R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2      PC       R  fetch pointer address, increment PC
                            D=00,M[PC], PC+=1                       (IDY_1)
        3    pointer    R  fetch effective address low
                            TL=M[D]  D+=1                           (IDY_2)
        4   pointer+1   R  fetch effective address high,
                           add Y to low byte of effective address
                            TH=M[D], TL+=Y                          (IDY_3)
        5   address+Y*  R  read from effective address,
                           fix high byte of effective address
                            if TH invalid, TH+=1, else DL=M[T]      (IDY_R)
        6   address+Y   R  read from effective address
                            DL=M[T]
        7   address+Y   W  write the value back to effective address,
                           and do the operation on it
                            DL=op(M[T])                             (depends)
        8   address+Y   W  write the new value to effective address
                            M[T]=DL                                 (IDY_W)

       Notes: The effective address is always fetched from zero page,
              i.e. the zero page boundary crossing is not handled.

              * The high byte of the effective address may be invalid
                at this time, i.e. it may be smaller by $100.

     Write instructions (STA,
                        SHA)

        #    address   R/W description
       --- ----------- --- ------------------------------------------
        1      PC       R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2      PC       R  fetch pointer address, increment PC
                            D=00,M[PC], PC+=1                       (IDY_1)
        3    pointer    R  fetch effective address low
                            TL=M[D]  D+=1                           (IDY_2)
        4   pointer+1   R  fetch effective address high,
                           add Y to low byte of effective address
                            TH=M[D], TL+=Y                          (IDY_3)
        5   address+Y*  R  read from effective address,
                           fix high byte of effective address
                            fix(TH)                                 (depends)
        6   address+Y   W  write to effective address
                            M[T]=A                                  (depends_PG)

       Notes: The effective address is always fetched from zero page,
              i.e. the zero page boundary crossing is not handled.

              * The high byte of the effective address may be invalid
                at this time, i.e. it may be smaller by $100.

  Absolute indirect addressing (JMP)

        #   address  R/W description
       --- --------- --- ------------------------------------------
        1     PC      R  fetch opcode, increment PC
                            IR=M[PC], PC+=1
        2     PC      R  fetch pointer address low, increment PC
                            DL=M[PC], PC+=1                         (ABSOLUTE_1)
        3     PC      R  fetch pointer address high, increment PC
                            DH=M[PC], PC+=1                         (ABSOLUTE_2)
        4   pointer   R  fetch low address to latch
                            TL=M[D]                                 (INDIRECT_1)
        5  pointer+1* R  fetch PCH, copy latch to PCL
                         (Made a new input for PCLmux.)
                            PCH=M[D+1], PCL=TL                      (JMP_IND)

       Note: * The PCH will always be fetched from the same page
               than PCL, i.e. page boundary crossing is not handled.

                How Real Programmers Acknowledge Interrupts

  With RMW instructions:

        ; beginning of combined raster/timer interrupt routine
        LSR $D019       ; clear VIC interrupts, read raster interrupt flag to C
        BCS raster      ; jump if VIC caused an interrupt
        ...             ; timer interrupt routine

        Operational diagram of LSR $D019:

          #  data  address  R/W
         --- ----  -------  ---  ---------------------------------
          1   4E     PC      R   fetch opcode
          2   19    PC+1     R   fetch address low
          3   D0    PC+2     R   fetch address high
          4   xx    $D019    R   read memory
          5   xx    $D019    W   write the value back, rotate right
          6  xx/2   $D019    W   write the new value back

        The 5th cycle acknowledges the interrupt by writing the same
        value back. If only raster interrupts are used, the 6th cycle
        has no effect on the VIC. (It might acknowledge also some
        other interrupts.)

  With indexed addressing:

        ; acknowledge interrupts to both CIAs
        LDX #$10
        LDA $DCFD,X

        Operational diagram of LDA $DCFD,X:

          #  data  address  R/W  description
         --- ----  -------  ---  ---------------------------------
          1   BD     PC      R   fetch opcode
          2   FD    PC+1     R   fetch address low
          3   DC    PC+2     R   fetch address high, add X to address low
          4   xx    $DC0D    R   read from address, fix high byte of address
          5   yy    $DD0D    R   read from right address

        ; acknowledge interrupts to CIA 2
        LDX #$10
        STA $DDFD,X

        Operational diagram of STA $DDFD,X:

          #  data  address  R/W  description
         --- ----  -------  ---  ---------------------------------
          1   9D     PC      R   fetch opcode
          2   FD    PC+1     R   fetch address low
          3   DC    PC+2     R   fetch address high, add X to address low
          4   xx    $DD0D    R   read from address, fix high byte of address
          5   ac    $DE0D    W   write to right address

  With branch instructions:

        ; acknowledge interrupts to CIA 2
                LDA #$00  ; clear N flag
                JMP $DD0A
        DD0A    BPL $DC9D ; branch
        DC9D    BRK       ; return

        You need the following preparations to initialize the CIA registers:

                LDA #$91  ; argument of BPL
                STA $DD0B
                LDA #$10  ; BPL
                STA $DD0A
                STA $DD08 ; load the ToD values from the latches
                LDA $DD0B ; freeze the ToD display
                LDA #$7F
                STA $DC0D ; assure that $DC0D is $00

        Operational diagram of BPL $DC9D:

          #  data  address  R/W  description
         --- ----  -------  ---  ---------------------------------
          1   10    $DD0A    R   fetch opcode
          2   91    $DD0B    R   fetch argument
          3   xx    $DD0C    R   fetch opcode, add argument to PCL
          4   yy    $DD9D    R   fetch opcode, fix PCH
        ( 5   00    $DC9D    R   fetch opcode )

        ; acknowledge interrupts to CIA 1
                LSR       ; clear N flag
                JMP $DCFA
        DCFA    BPL $DD0D
        DD0D    BRK

        ; Again you need to set the ToD registers of CIA 1 and the
        ; Interrupt Control Register of CIA 2 first.

        Operational diagram of BPL $DD0D:

          #  data  address  R/W  description
         --- ----  -------  ---  ---------------------------------
          1   10    $DCFA    R   fetch opcode
          2   11    $DCFB    R   fetch argument
          3   xx    $DCFC    R   fetch opcode, add argument to PCL
          4   yy    $DC0D    R   fetch opcode, fix PCH
        ( 5   00    $DD0D    R   fetch opcode )
